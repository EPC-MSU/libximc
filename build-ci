#!/bin/sh
# jenkins build (not checked with hudson, different variable names)
set -e

build_debian()
{
	./build.sh cleandist
	./build.sh libdeb
}

build_opensuse()
{
	./build.sh cleandist
	./build.sh librpm
}

build_macosx()
{
	[ -z "`command -v pdflatex`" ] && PATH=$PATH:/usr/texbin
	./build.sh cleandist
	./build.sh libosxci
}

build_docs()
{
	./build.sh cleandist
	./build.sh onlydocs
}

makedist()
{
	./build.sh makedist
}

# ---------------------
# entry point

[ -n "$GIT" ] || GIT=git

echo Using jenkins at $JENKINS_HOME, node $NODE_NAME, buildos $BUILDOS
echo Using parameters $NODE_LABELS, starter $0, command line $*
echo Use git revision $XIMC_REVISION

echo git effective version:
$GIT log -1 HEAD

# dist override all other
if [ "$1" = "unpack-stashes" ] ; then
	ls -1 results-*.tar | xargs -L1 -t tar xfv
	echo Before
	ls -lR ximc || true
	chmod -R u+rX ximc
	echo After
	ls -lR ximc || true
elif [ "$1" = "dist" ] ; then
	makedist
elif [ "$1" = "docs" ] ; then
	build_docs
	tar cf results-dist-docs.tar ximc
elif [ "$1" = "abicc-dump" ] ; then
	./build.sh abicc-dump

elif [ "$1" = "build" ] ; then
	./build.sh cleandist
	# modern CI build without using implicit labels
	buildos=$BUILDOS
	if [ "$buildos" = "debian64" ] || [ "$buildos" = "debian32" ] || [ "$buildos" = "debianarm" ] ; then
		build_debian
	elif [ "$buildos" = "suse64" ] || [ "$buildos" = "suse32" ] ; then
		build_opensuse
	elif [ "$buildos" = "osx" ] ; then
		build_macosx
	else
		echo "No name in $BUILDOS"
		exit 1
	fi
	tar cf results-dist-$buildos.tar ximc
elif [ "$1" = "py-binding" ] ; then
	# Win32
	mkdir -p wrappers/python/src/library-files/win32
	cp ximc/win32/*.dll wrappers/python/src/library-files/win32
	cp ximc/win32/*.lib wrappers/python/src/library-files/win32

	# Win64
	mkdir -p wrappers/python/src/library-files/win64
	cp ximc/win64/*.dll wrappers/python/src/library-files/win64
	cp ximc/win64/*.lib wrappers/python/src/library-files/win64

	# Debian-i386
	mkdir -p wrappers/python/src/library-files/debian-i386
	cp ximc/debian-i386/* wrappers/python/src/library-files/debian-i386

	# Debian-armhf
	mkdir -p wrappers/python/src/library-files/debian-armhf
	cp ximc/debian-armhf/* wrappers/python/src/library-files/debian-armhf

	# Debian-amd64
	mkdir -p wrappers/python/src/library-files/debian-amd64
	cp ximc/amd64/* wrappers/python/src/library-files/amd64

	cd wrappers/python
	echo Building python binding with
	echo $(python3 --version)
	echo $(python3 -m build --version)
	python3 -m build
	
	cd -
else
	# usual build. node labels are passed by env variable
	for label in $NODE_LABELS
	do
		if [ "$label" = "debian" ] ; then
			[ -n "$NODE_NAME" ] || NODE_NAME=$label
			build_debian
			tar cf results-dist-$NODE_NAME.tar ximc
			break
		elif [ "$label" = "suse" ] ; then
			[ -n "$NODE_NAME" ] || NODE_NAME=$label
			build_opensuse
			tar cf results-dist-$NODE_NAME.tar ximc
			break
		elif [ "$label" = "osx" ] ; then
			[ -n "$NODE_NAME" ] || NODE_NAME=$label
			build_macosx
			tar cf results-dist-$NODE_NAME.tar ximc
			break
		fi
	done
fi

echo Build completed
